
=pod

=head1 NAME

user - An ANSI C class to manage the room status database

=head1 SYNOPSIS

 #include "when.h"
 #include "room_status.h"

 int compare(void *data1, void *data2) {
 
     int stat = FALSE;
     room_status_t *status = (room_status_t *)data2;
     room_status_find_t *find = (room_status_find_t *)data1;
     
     if ((find->roomnum == status->roomnum) &&
         (find->usernum == status->usernum)) {
         
         stat = TRUE;
         
     }
     
     return stat;

 }

 int is_zapped(int roomnum, int usernum) {
 
     off_t recnum;
     int stat = OK;
     room_status_t status;
     room_status_find_t find;
     int recsize = sizeof(room_status_find_t);

     when_error_in {
     
         find.roomnum = roomnun;
         find.usernum = usernum;
 
         stat = room_status_find(rstatus, &find, recsize, compare, &recnum);
         check_return(stat, rstatus);
         
         if (recnum > 0) {
         
             stat = room_status_get(rstatus, recnum, &status);
             check_return(stat, rstatus);
             
         }

         exit_when;
         
    } use {
    
        stat = ERR;

    } end_when;
    
    return stat;
 }
 
=head1 DESCRIPTION

This class implements the room status database. This is an extension of the 
rms class. There is one record for each room/user combination.

Records that are deleted are not removed from the database. They 
are marked as deleted. They will be reused.

The database consists of these two files:

 room_status.dat    - the actual data
 room_status.seq    - where the last record number is stored

This library is a class. It is extensible and overridable. It also makes 
use of the L<rms(3)>, L<errors(3)> and L<tracer(3)> classes for error handling and 
reporting. 

The files room_status.c and room_status.h define the class. 

=over 4

=item B<room_status.h>

This defines the interface to the class. 

=item B<room_status.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<rms_t *room_status_create(NULL)>

This method initializes the class. 


=head2 I<int room_status_destroy(rms_t *self)>

This destroys the object. 

=over 4

=item B<self>

A pointer to the rms_t object.

=back

=head2 I<int room_status_override(rms_t *self, item_list_t *items)>

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to the rms_t object.

=item B<items>

An array of item_list_t data types. The array is 0 terminated.

=back

=head2 I<int room_status_compare(rms_t *this, rms_t *that)>

This method allows you to compare one rms_t object to another. 

=over 4

=item B<this>

A pointer to a rms_t object.

=item B<that>

A pointer to a rms_t object.

=back

=head2 I<char *room_status_version(rms_t *self)>

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the rms_t object.

=back

=head2 I<int room_status_open(rms_t *self)>

This method allows access to the database. 

=over 4

=item B<self>

A pointer to a rms_t object.

=back

=head2 I<int room_status_close(rms_t *self)>

This method closes access to the database.

=over 4

=item B<self>

A pointer to a rms_t object.

=back

=head2 I<int room_status_add(rms_t *self, room_status_t *status)>

This method adds a record to the database. 

=over 4

=item B<self>

A pointer to a rms_t object.

=item B<status>

A pointer to a room_status_t type to write to the database.

=back

=head2 I<int room_status_del(rms_t *self, int recnum)>

This method deletes a record from the database. The record is not
removed from the database. It is marked as "deleted". The record will
be reused.

=over 4

=item B<self>

A pointer to a rms_t object.

=item B<recnum>

A record within the database.

=back

=head2 I<int room_status_get(rms_t *self, int recnum, room_status_t *status)>

This method gets the indicated record.

=over 4

=item B<self>

A pointer to a rms_t object.

=item B<recnum>

The record to get.

=item B<status>

A pointer to a room_status_t type to write the data too.

=back

=head2 I<int room_status_put(rms_t *self, int recnum, room_status_t *status)>

This method updates the room status.

=over 4

=item B<self>

A pointer to a rms_t object.

=item B<recnum>

The record to update.

=item B<status>

A pointer to a room_status_t type.

=back

=head2 I<int room_status_find(rms_t *self, void *data, int len, int (*compare)(void *, int, room_status_t *), off_t *recnum)>

This method will return the first record that matches the comparison.

=over 4

=item B<self>

A pointer to a rms_t object.

=item B<data>

A pointer to the data to use for comparison.

=item B<len>

The length of the data.

=item B<compare>

A comparison function used to match the data to a room_status_t type.
This should return TRUE on match, otherwise FALSE.

=item B<recnum>

A pointer to write the record number that matches. A 0 is returned
if nothing matches.

=back

=head2 I<int room_status_search(rms_t *self, void *data, int len, int (*compare)(void *, int, room_status_t *), int (*capture)(rms_t *, void *, queue *), queue *)>

This method will return all the records that matches the comparison.

=over 4

=item B<self>

A pointer to a rms_t object.

=item B<data>

A pointer to the data to use for the comparison.

=item B<len>

The length of the data.

=item B<compare>

A comparison function used to match the data to a room_status_t type.
This should return TRUE on match, otherwise FALSE.

=item B<capture> 

A capture function that is used to retrieve the matching records. It
should return OK on success or ERR if not.

=item B<results>

A pointer to write the list of room_status_search_t types. This list 
may be empty if nothing matches.

=back

=head2 I<int room_status_capture(rms_t *self, void *data, queue *results)>

A default capture function. 

=over 4

=item B<self>

A pointer to a rms_t object.

=item  B<data>

A pointer to a room_status_t type.

=item B<results>

A queue to write the results too. These would consist of room_status_search_t
types.

=back

=head1 RETURNS

The method room_status_create() returns a pointer to a rms_t object. 
All other methods return either OK on success or ERR on failure. The 
extended error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<object(3)>

=item L<rms(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2021 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

