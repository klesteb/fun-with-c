
=pod

=head1 NAME

finds - A set of predefined comparison functions

=head1 SYNOPSIS

 #include "finds.h"
 

 stat = room_search(room, NULL, 0, find_rooms_all, &results);
 check_return(stat, room);

 while ((result = que_pop_head(&results))) {

     stat = room_get(room, result->index, &temp);
     check_return(stat, room);

     printf("---------------------------------\n");
     printf("name      : %s\n", temp.name);
     printf("path      : %s\n", temp.path);
     printf("conference: %d\n", temp.conference);
     printf("flags     : %d\n", temp.flags);
     printf("messages  : %d\n", (int)size);

     free(result);

 }

=head1 DESCRIPTION

These are pre-defined comparison functions that can be used to search
the room database.

=head1 METHODS

=head2 I<int find_rooms_all(void *data, int len, room_base_t *room)>

Find all rooms. Suitable for room_search().

=over 4

=item B<data>

A pointer to a data item be used for comparison.

=item B<len>

Then size of the item

=item B<room>

The room to compare against.

=back

=head2 I<int find_rooms_messages(void *data, int len, room_base_t *room)>

Find rooms that manage message resources. Suitable for room_search().

=over 4

=item B<data>

A pointer to a data item be used for comparison.

=item B<len>

Then size of the item

=item B<room>

The room to compare against.

=back

=head2 I<int find_rooms_networked(void *data, int len, room_base_t *room)>

Find all rooms that are networked. Suitable for room_search().

=over 4

=item B<data>

A pointer to a data item be used for comparison.

=item B<len>

Then size of the item

=item B<room>

The room to compare against.

=back

=head2 I<int find_room_by_conference(void *data, int len, room_base_t *room)>

Find the room with this conference number. Suitable for room_find().

=over 4

=item B<data>

A pointer to a data item be used for comparison.

=item B<len>

Then size of the item

=item B<room>

The room to compare against.

=back

=head2 I<int find_index_all(ulong selector, jam_index_t *index)>

Find the indexes that match the selector. In this case it returns all of
the indexes.

=over 4

=item B<selector>

The item to compare against.

=item B<index>

A pointer to a a jam_index_t index type.

=back

=head2 I<int find_index_by_user(ulong selector, jam_index_t *index)>

Find the indexes that match the selector. In this case it matches the
JAM crc32 value of the users name.

=over 4

=item B<selector>

The item to compare against.

=item B<index>

A pointer to a a jam_index_t index type.

=back

=head2 I<int find_nodes_all(void *data1, void *data2)>

Find the nodes the match the criteria. In this case it matches all of
the nodes.

=over 4

=item B<data1>

A NULL value.

=item B<data2>

A NULL value.

=back

=head2 I<int find_nodes_by_number(void *data1, void *data2)>

Find the nodes the match the criteria. In this case it matches the
node number.

=over 4

=item B<data1>

A pointer to the node number.

=item B<data2>

A pointer to a node_base_t type.

=back

=head2 I<int find_nodes_active(void *data1, void *data2)>

Find the nodes the match the criteria. In this case it matches nodes
that are active.

=over 4

=item B<data1>

A NULL value.

=item B<data2>

A pointer to a node_base_t type.

=back

=head2 I<int find_users_all(void *data1, void *data2)>

Find the users the match the criteria. In this case it matches all of the
users.

=over 4

=item B<data1>

A NULL value.

=item B<data2>

A NULL pointer

=back

=head2 I<int find_user_by_name(void *data1, void *data2)>

Find the users the match the criteria. In this case it matches a single
user.

=over 4

=item B<data1>

A pointer to a character string of the users name.

=item B<data2>

A pointer to a user_base_t type.

=back

=head1 RETURNS

These functions return TRUE when a match is made, otherwise FALSE.

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<msgs(3)>

=item L<room(3)>

=item L<user(3)>

=item L<node(3)>

=item L<object(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2021 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

