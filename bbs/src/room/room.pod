
=pod

=head1 NAME

room - A ANSI C class to manage rooms

=head1 SYNOPSIS

 #include <stdio.h>
 #include <errno.h>

 #include "room.h"
 #include "when.h"
 #include "files.h"
 #include "errors.h"
 #include "tracer.h"
 #include "misc/misc.h"

 room_t *room;
 tracer_t *dump;
 errors_t *errs;

 int find_all(void *data, int len, room_base_t *room) {
 
     return TRUE;
     
 }
 
 int dump_trace(char *buffer) {

     fprintf(stderr, "%s\n", buffer);

     return OK;

 }

 int setup(void) {

     int base = 1;
     int stat = OK;
     int timeout = 1;
     int retries = 30;
     char *dbpath = "../../data/";
     char *msgpath = "../../messages/";

     when_error_in {

         errs = errors_create();
         check_creation(errs);

         dump = tracer_create(errs);
         check_creation(dump);

         room = room_create(dbpath, msgpath, retries, timeout, base, dump);
         check_creation(room);

         exit_when;

     } use {

         stat = ERR;
         capture_trace(dump);
         clear_error();

     } end_when;

     return stat;

 }

 void cleanup(void) {

     room_destroy(room);
     tracer_destroy(dump);
     errors_destroy(errs);

 }

 int main(int argc, char **argv) {

     int stat = OK;
     queue results;
     room_base_t temp;
     room_search_t *result = NULL;

     when_error_in {

         stat = que_init(&results);
         check_status(stat, QUE_ON, E_INVOPS);

         stat = setup();
         check_status(stat, OK, E_INVOPS);

         stat = room_open(room);
         check_return(stat, room);

         stat = room_search(room, NULL, 0, find_all, &results);
         check_return(stat, room);

         while ((result = que_pop_head(&results))) {

             stat = room_get(room, result->index, &temp);
             check_return(stat, room);

             printf("---------------------------------\n");
             printf("name      : %s\n", temp.name);
             printf("path      : %s\n", temp.path);
             printf("conference: %d\n", temp.conference);
             printf("flags     : %d\n", temp.flags);
             printf("messages  : %d\n", (int)size);

             free(result);

         }

         stat = room_close(room);
         check_return(stat, room);

         exit_when;

     } use {

         capture_trace(dump);
         tracer_dump(dump, dump_trace);
         clear_error();

     } end_when;

     cleanup();

     return 0;

 }

=head1 DESCRIPTION

This class implements "rooms". Rooms are a way to organize resources. 
This concept was first used in the CP/M version of Citadel. Which 
apparently borrowed the concept from the MUDs of that era. Other Citadels 
expanded on this concept. 

The database has a fixed number of rooms. It can be extended, but never 
contracted. Rooms are numbered sequentially and always maintain their 
number. Rooms that are deleted, are not removed from the database. They 
are wiped and marked as inactive and any associated resources are removed. 
Rooms that are marked inactive are reused. 

The database consists of these two files:

 rooms.dat - the actual data
 rooms.seq - where the last room number is stored

This library is a class. It is extensible and overridable. It also makes 
use of the L<errors(3)> and L<tracer(3)> classes for error handling and 
reporting. 

The files room.c and room.h define the class. 

=over 4

=item B<room.h>

This defines the interface to the class. 

=item B<room.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<room_t *room_create(char *dbpath, char *msgpath, int retries, int timeout, int base, tracer_t *dump)>

This method initializes the class. 

=over 4

=item B<dbpath>

The path where the room database file is stored.

=item B<msgpath>

The path to where the messages are stored. 

=item B<retires>

The number of retires for file locking.

=item B<timeout>

The wait time in seconds between retires.

=item B<dump>

A pointer to a tracer_t object to manage a trace dump.

=back

=head2 I<int room_destroy(room_t *self)>

This destroys the object. 

=over 4

=item B<self>

A pointer to the room_t object.

=back

=head2 I<int room_override(room_t *self, item_list_t *items)>

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to the room_t object.

=item B<items>

An array of item_list_t data types. The array is 0 terminated.

=back

=head2 I<int room_compare(room_t *this, room_t *that)>

This method allows you to compare one room_t object to another. 

=over 4

=item B<this>

A pointer to a room_t object.

=item B<that>

A pointer to a room_t object.

=back

=head2 I<char *room_version(room_t *self)>

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the room_t object.

=back

=head2 I<int room_open(room_t *self)>

This method allows access to the rooms. 

=over 4

=item B<self>

A pointer to a room_t object.

=back

=head2 I<int room_close(room_t *self)>

This method closes access to the rooms.

=over 4

=item B<self>

A pointer to a room_t object.

=back

=head2 I<int room_add(room_t *self, room_base_t *room)>

This method adds a new room.

=over 4

=item B<self>

A pointer to a room_t object.

=item B<room>

A pointer to a room_base_t type.

=back

=head2 I<int room_del(room_t *self, int index)>

This method deletes a room.

=over 4

=item B<self>

A pointer to a room_t object.

=item B<index>

The room to delete.

=back

=head2 I<int room_get(room_t *self, int index, room_base_t *room)>

This method gets the indicated room.

=over 4

=item B<self>

A pointer to a room_t object.

=item B<index>

The room to get.

=item B<room>

A pointer to a room_base_t type to write the data too.

=back

=head2 I<int room_put(room_t *self, int index, room_base_t *room)>

This method updates a room.

=over 4

=item B<self>

A pointer to a room_t object.

=item B<index>

The room to update.

=item B<room>

A pointer to a room_base_t type.

=back

=head2 I<int room_find(room_t *self, void *data, int len, int (*compare)(void *, int, room_base_t *), int *index)>

This method will return the first room that matches the comparison.

=over 4

=item B<self>

A pointer to a room_t object.

=item B<data>

A pointer to the data to use for comparison.

=item B<len>

The length of the data.

=item B<compare>

A comparison function used to match the data to a room_base_t type.
This should return TRUE on match, otherwise FALSE.

=item B<index>

A pointer to write the index of the room that matches. A 0 is returned
if nothing matches.

=back

=head2 I<int room_search(room_t *self, void *data, int len, int (*compare)(void *, int, room_base_t *), queue *results)>

This method will return all the rooms that matches the comparison.

=over 4

=item B<self>

A pointer to a room_t object.

=item B<data>

A pointer to the data to use for the comparison.

=item B<len>

The length of the data.

=item B<compare>

A comparison function used to match the data to a room_base_t type.
This should return TRUE on match, otherwise FALSE.

=item B<results>

A pointer to write the list of room_search_t types. This list may be empty if 
nothing matches.

=back

=head2 I<int room_extend(room_t *self, int size)>

=over 4

=item B<self>

A pointer to a room_t object.

=item B<size>

A number of records to extend the database by.

=back

=head2 I<room_handler(room_t *self, room_base_t *room, void **handle)>

This method returns the handler for the room resource.

=over 4

=item B<self>

A pointer to a room_t object.

=item B<room>

A pointer to a room_base_t type.

=item B<handle>

A pointer a room resource handle. This handle can then used with the
resource access methods. This handle should not be freed.

=back

=head1 RETURNS

The method room_create() returns a pointer to a room_t object. 
All other methods return either OK on success or ERR on failure. The 
extended error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<finds(3)>

=item L<msgs(3)>

=item L<handler(3)>

=item L<object(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2020 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

