
=pod

=head1 NAME

handler - A ANSI C class to handle room resources

=head1 SYNOPSIS

 #include <stdio.h>
 #include "handler.h"

 int main(int argc, char **argv) {

     handler_t *temp = NULL;

     if ((temp = handler_create(db, path, retries, timeout, base, dump))) {

         handler_destroy(temp);

     }

     return 0;

 }

=head1 DESCRIPTION

This is a base class to access room resources. This class provides a
call interface and needs to be overridden to be useful. 

The files handler.c and handler.h define the class. 

=over 4

=item B<handler.h>

This defines the interface to the class. 

=item B<handler.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<handler_t *handler_create(files_t *db, char *path, int retries, int timeout, int base, tracer_t *dump)>

This method initializes the class. 

=over 4

=item B<db>

This is a pointer to the room database.

=item B<path>

The path to where the resource is stored. 

=item B<retires>

The number of retires for file locking.

=item B<timeout>

The wait time in seconds between retires.

=item B<dump>

A pointer to a tracer_t object to manage a trace dump.

=back

=head2 I<int handler_destroy(handler_t *self)>

This destroys the object. 

=over 4

=item B<self>

A pointer to the handler_t object.

=back

=head2 I<int handler_override(handler_t *self, item_list_t *items)>

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to the handler_t object.

=item B<items>

An array of item_list_t data types. The array is 0 terminated.

=back

=head2 I<int handler_compare(handler_t *this, handler_t *that)>

This method allows you to compare one handler_t object to another. 

=over 4

=item B<this>

A pointer to a handler_t object.

=item B<that>

A pointer to a handler_t object.

=back

=head2 I<char *handler_version(handler_t *self)>

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the handler_t object.

=back

=head2 I<handler_init(handler_t *self)>

This method initializes the resource.

=over 4

=item B<self>

A pointer to the handler_t object.

=back

=head2 <handler_attach(handler_t *self, room_base_t *room)>

This method attaches a handler to a room.

=over 4

=item B<self>

A pointer to the handler_t object.

=item B<room>

A pointer to a room_base_t type.

=back

=head2 I<handler_detach(handler_t *self)>

This method detaches the handler for the resource.

=over 4

=item B<self>

A pointer to the handler_t object.

=back

=head2 I<handler_remove(handler_t *self)>

This handler removes the resource.

=over 4

=item B<self>

A pointer to the handler_t object.

=back

=head1 RETURNS

The method handler_create() returns a pointer to a handler_t object. 
All other methods return either OK on success or ERR on failure. The 
extended error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<msgs(3)>

=item L<room(3)>

=item L<object(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2020 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

