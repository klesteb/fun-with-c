
=pod

=head1 NAME

message - A class to manage messages.

=head1 SYNOPSIS

 #include <stdio.h>
 #include "message.h"

 int main(int argc, char **argv) {

     message_t *temp = NULL;

     if ((temp = message_create(NULL))) {

         message_destroy(temp);

     }

     return 0;

 }

=head1 DESCRIPTION

This is a class to handle messages. This allows you to define messages
for different environments and decouple your code from the displayed
messages.

The files message.c and message.h define the class. 

=over 4

=item B<message.h>

This defines the interface to the class. 

=item B<message.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<message_t *message_create(messages_t *messages, int msg_size)>

This method initializes the class. Predefined messages can be loaded
on class intialization.

=over 4

=item B<messages>

An array of messages_t types.

=item B<msg_size>

The number of elements.

=back

=head2 I<int message_destroy(message_t *self)>

This destroys the object. 

=over 4

=item B<self>

A pointer to the message_t object.

=back

=head2 I<int message_override(message_t *self, item_list_t *items)>

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to the message_t object.

=item B<items>

An array of item_list_t types. The array is 0 terminated.

=back

=head2 I<int message_compare(message_t *this, message_t *that)>

This method allows you to compare one message_t object to another. 

=over 4

=item B<this>

A pointer to a message_t object.

=item B<that>

A pointer to a message_t object.

=back

=head2 I<char *message_version(message_t *self)>

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the message_t object.

=back

=head2 I<int message_add(message_t *self, int nemonic, char *message)>

This method allows you to add a message defination.

=over 4

=item B<self>

A pointer to the message_t object.

=item B<nemonic>

A number for the message.

=item B<message>

The message text.

=back

=head2 I<int message_set(message_t *self, int nemonic, char *text)>

This method allows you to change the message text.

=over 4

=item B<self>

A pointer to the message_t object.

=item B<nemonic>

The number for the message.

=item B<text>

The new message text.

=back

=head2 I<int message_get(message_t *self, int nemonic, char *buffer, int size)>

This method allows you to retrieve the message text for a nemonic.

=over 4

=item B<self>

A pointer to the message_t object.

=item B<nemonic>

The message nemonic.

=item B<buffer>

The buffer to copy the text into.

=item B<size>

The size of the buffer.

=back

=head2 I<int message_remove(message_t *self, int nemonic)>

This method allows you to remove a message.

=over 4

=item B<self>

A pointer to the message_t object.

=item B<nemonic>

The message nemonic.

=back

=head2 I<int message_load(message_t *self, messages_t *messages, int size)>

This method allows you to load an array of meessages_t types.

=over 4

=item B<self>

A pointer to the message_t object.

=item B<messages>

An array of messages_t types.

=item B<size>

The number of elements in the array.

=back

=head1 RETURNS

The method message_create() returns a pointer to a message_t object. 
All other methods return either OK on success or ERR on failure. The 
extended error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<object(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2020 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

