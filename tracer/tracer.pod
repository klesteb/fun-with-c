
=pod

=head1 NAME

tracer - A simple class to manage a stack dump

=head1 SYNOPSIS

 #include <stdio.h>
 #include "errors.h"
 #include "tracer.h"

 int main(int argc, char **argv) {

     tracer_t *temp = NULL;
     errors_t *errors = NULL;

     if ((errors = errors_create(NULL))) {
     
         if ((temp = tracer_create(errors))) {

             tracer_destroy(temp);
             
         }
         
         errors_destroy(errors);

     }

     return 0;

 }

=head1 DESCRIPTION

This is a basic class written in ANSI C. It manages a list of
error_trace_t types and can output them is an organized manner.

The files tracer.c and tracer.h define the class. 

=over 4

=item B<tracer.h>

This defines the interface to the class. 

=item B<tracer.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<tracer_t *tracer_create(errors_t *errors)>

This method initializes the class. It returns a pointer to the
tracer_t object. Any errors may be returned with object_get_error().

=over 4

=item B<errors_t *errors>

A pointer to an errors_t object.

=back

=head2 I<int tracer_destroy(tracer_t *self)>

This destroys the object. It returns OK on success and ERR on failure. 
The extended error description can be returned with object_get_error().

=over 4

=item B<self>

A pointer to the tracer_t object.

=back

=head2 I<int tracer_override(tracer_t *self, item_list_t *items)>

This method allows you to override methods. It returns OK on success and
ERR on failure. The extended error description can be returned with
object_get_error().

=over 4

=item B<self>

A pointer to the tracer_t object.

=item B<items>

An array of item_list_t data types. The array is 0 terminated.

=back

=head2 I<int tracer_compare(tracer_t *this, tracer_t *that)>

This method allows you to compare one tracer_t object to another. It 
returns OK on success and ERR on failure. The extended error description 
can be returned with object_get_error().

=over 4

=item B<this>

A pointer to a tracer_t object.

=item B<that>

A pointer to a tracer_t object.

=back

=head2 I<char *tracer_version(tracer_t *self)>

This method returns the version of the library. The version number
follows the guidlines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the tracer_t object.

=back

=head2 I<int tracer_add(tracer_t *self, error_trace_t *error)>

This method allows you to add a error_trace_t type to the dump stack. It 
returns OK on success and ERR on failure. The extended error description 
can be returned with object_get_error().

=over 4

=item B<self>

A pointer to the tracer_t object.

=item B<error>

A pointer to the error_trace_t type.

=back

=head2 I<int tracer_dump(tracer_t *self, int (*output)(char *))>

This method allows you to output the stack dumpt of error_trace_t types. It 
returns OK on success and ERR on failure. The extended error description 
can be returned with object_get_error().

=over 4

=item B<self>

A pointer to the tracer_t object.

=item B<*output(char *)>

A callback that will output the error_trace_t type.

=back

=head1 BUILDING

The following assumes a GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruff from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<object(3)>

=item L<errors(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2020 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

