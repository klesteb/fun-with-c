
=pod

=head1 NAME

user - An ANSI C class to manage the user database

=head1 SYNOPSIS

 #include <stdio.h>
 #include <errno.h>

 #include "user.h"
 #include "when.h"
 #include "finds.h"
 #include "files.h"
 #include "errors.h"
 #include "tracer.h"
 #include "misc/misc.h"

 user_t *users;
 tracer_t *dump;
 errors_t *errs;

 int display(user_base_t *user) {

     printf("---------------------------\n");
     printf("eternal : %ld\n", user->eternal);
     printf("username: %s\n", user->username);

     return OK;

 }

 int dump_trace(char *buffer) {

     fprintf(stderr, "%s\n", buffer);

     return OK;

 }

 int setup(void) {

     int stat = OK;
     int timeout = 1;
     int retries = 30;
     int records = 256;
     char *path = "../../data/";

     when_error_in {

         errs = errors_create();
         check_creation(errs);

         dump = tracer_create(errs);
         check_creation(dump);

         users = user_create(path, records, retries, timeout, dump);
         check_creation(users);

         exit_when;

     } use {

         stat = ERR;
         capture_trace(dump);
         clear_error();

     } end_when;

     return stat;

 }

 void cleanup(void) {

     user_destroy(users);
     tracer_destroy(dump);
     errors_destroy(errs);

 }

 int main(int argc, char **argv) {

     int stat = OK;
     queue results;
     user_base_t ondisk;
     user_search_t *result = NULL;

     when_error_in {

         stat = que_init(&results);
         check_status(stat, QUE_OK, E_INVOPS);

         stat = setup();
         check_status(stat, OK, E_INVOPS);

         stat = user_open(users);
         check_return(stat, users);

         stat = user_search(users, NULL, 0, find_users_all, &results);
         check_return(stat, users);

         printf("\nfound %d users\n", que_size(&results));

         while ((result = que_pop_head(&results))) {

             stat = user_get(users, result->index, &ondisk);
             check_return(stat, users);

             display(&ondisk);
             free(result);

         }

         stat = user_close(users);
         check_return(stat, users);

         exit_when;

     } use {

         capture_trace(dump);
         tracer_dump(dump, dump_trace);
         clear_error();

     } end_when;

     cleanup();

     return 0;

 }

=head1 DESCRIPTION

This class implements the user database. This is a fixed size file. It
can be extended but never contracted. Records that are deleted are not
removed from the database. They are marked as deleted. They are not
reused. This class doesn't deal with authentication. It is used to
keep track of the users system usage and what authorizations they have 
within the bbs system.

The database consists of these three files:

 users.dat    - the actual data
 users.seq    - where the last user number is stored

This library is a class. It is extensible and overridable. It also makes 
use of the L<rms(3)>, L<errors(3)> and L<tracer(3)> classes for error handling and 
reporting. 

The files user.c and user.h define the class. 

=over 4

=item B<user.h>

This defines the interface to the class. 

=item B<user.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<user_t *user_create(NULL)>

This method initializes the class. 

=head2 I<int user_destroy(user_t *self)>

This destroys the object. 

=over 4

=item B<self>

A pointer to the user_t object.

=back

=head2 I<int user_override(user_t *self, item_list_t *items)>

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to the user_t object.

=item B<items>

An array of item_list_t data types. The array is 0 terminated.

=back

=head2 I<int user_compare(user_t *this, user_t *that)>

This method allows you to compare one user_t object to another. 

=over 4

=item B<this>

A pointer to a user_t object.

=item B<that>

A pointer to a user_t object.

=back

=head2 I<char *user_version(user_t *self)>

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the user_t object.

=back

=head2 I<int user_open(user_t *self)>

This method allows access to the users database. 

=over 4

=item B<self>

A pointer to a user_t object.

=back

=head2 I<int user_close(user_t *self)>

This method closes access to the users database.

=over 4

=item B<self>

A pointer to a user_t object.

=back

=head2 I<int user_add(user_t *self, user_base_t *user)>

This method adds a user to the users database. 

=over 4

=item B<self>

A pointer to a user_t object.

=item B<user>

A pointer to a user_base_t type to write to the database.

=back

=head2 I<int user_del(user_t *self, int index)>

This method deletes a user from the users database. The record is not
removed from the database. It is marked as "deleted". The record is
not reused.

=over 4

=item B<self>

A pointer to a user_t object.

=item B<index>

The index to the users record within the database.

=back

=head2 I<int user_get(user_t *self, int index, user_base_t *user)>

This method gets the indicated user.

=over 4

=item B<self>

A pointer to a user_t object.

=item B<index>

The user to get.

=item B<user>

A pointer to a user_base_t type to write the data too.

=back

=head2 I<int user_put(user_t *self, int index, user_base_t *user)>

This method updates a user.

=over 4

=item B<self>

A pointer to a user_t object.

=item B<index>

The user to update.

=item B<user>

A pointer to a user_base_t type.

=back

=head2 I<int user_find(user_t *self, void *data, int len, int (*compare)(void *, int, user_base_t *), off_t *index)>

This method will return the first user that matches the comparison.

=over 4

=item B<self>

A pointer to a user_t object.

=item B<data>

A pointer to the data to use for comparison.

=item B<len>

The length of the data.

=item B<compare>

A comparison function used to match the data to a user_base_t type.
This should return TRUE on match, otherwise FALSE.

=item B<index>

A pointer to write the index of the user that matches. A 0 is returned
if nothing matches.

=back

=head2 I<int user_search(user_t *self, void *data, int len, int (*compare)(void *, int, user_base_t *), int (*capture)(user_base_t *, error_trace_t *))>

This method will return all the users that matches the comparison.

=over 4

=item B<self>

A pointer to a user_t object.

=item B<data>

A pointer to the data to use for the comparison.

=item B<len>

The length of the data.

=item B<compare>

A comparison function used to match the data to a user_base_t type.
This should return TRUE on match, otherwise FALSE.

=item B<results>

A pointer to write the list of user_search_t types. This list may be empty if 
nothing matches.

=back

=head1 RETURNS

The method user_create() returns a pointer to a user_t object. 
All other methods return either OK on success or ERR on failure. The 
extended error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<object(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2021 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

