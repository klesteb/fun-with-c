
=pod

=head1 NAME

object - An ANSI C class system

=head1 SYNOPSIS

 #include "object.h"

=head1 DESCRIPTION

ANSI C has no concept of objects nor classes, but it does understand
abstract data types and callbacks. And from this base, we can construct
a class system. That allows us to override methods and extend classes. Each 
class must manage all memory that it consumes.

That along with built in error tracking can lead to building a robust
system with C. There is no magic bullet here and we are doing class 
based programming the hard way.

The files object.c and object.h define the class. 

=over 4

=item B<object.h>

This defines the interface to the class. 

=item B<object.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<object_t *object_create(NULL)>

This method initializes the class. It returns a pointer to the
object_t object. Any errors may be returned with object_get_error().

=head2 I<int object_destroy(object_t *self)>

This destroys the object. It returns OK on success and ERR on failure. 
The extended error description can be returned with object_get_error().

=over 4

=item B<self>

A pointer to the object_t object.

=back

=head2 I<int object_override(object_t *self, item_list_t *items)>

This method allows you to override methods. It returns OK on success and
ERR on failure. The extended error description can be returned with
object_get_error().

=over 4

=item B<self>

A pointer to the object_t object.

=item B<items>

An array of item_list_t data types. The array is 0 terminated.

=back

=head2 I<int object_compare(object_t *this, object_t *that)>

This method allows you to compare one object_t object to another. It 
returns OK on success and ERR on failure. The extended error description 
can be returned with object_get_error().

=over 4

=item B<this>

A pointer to a object_t object.

=item B<other>

A pointer to a object_t object.

=back

=head2 I<char *object_version(object_t *self)>

This method returns the version of the library. The version number
follows the guidlines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the object_t object.

=back

=head2 I<int object_get_error(object_t *self, error_trace_t *error)>

This method returns any error associated with this class. It returns 
OK on success and ERR on failure.

=over 4

=item B<self>

A pointer to the object_t object.

=item B<error>

A pointer to a error_trace_t type. 

=back

=head2 I<int object_set_error(object_t *self, int errnum, int lineno, char *file, const char *function)>

This method set an error that is associated with this class. It returns 
OK on success and ERR on failure.

=over 4

=item B<self>

A pointer to an object_t object.

=item B<errnum>

An error number associated with the error.

=item B<lineno>

The line number where the error happened.

=item B<file>

The C source code file name.

=item B<function>

The C function that the error occured in.

=back

=head2 I<object_assert(klass, type)>

A MACRO that checks the object type against a class.

=over 4

=item B<klass>

A pointer to a class.

=item B<type>

The class type to compare against.

=back

=head2 I<object_demote(object, type>

A MACRO to demote from one object to another.

=over 4

=item B<object>

A pointer to an object.

=item B<type>

The class type to demote too.

=back

=head2 I<object_set_error1(object, error)>

A helper MACRO to set defaults for the object_set_error() method.

=over 4

=item B<object>

A pointer to an object.

=item B<error>

A error number to set.

=back

=head2 I<object_set_error2(object, error, lineno, file, function)>

A helper MACRO to set defaults for the object_set_error() method.

=over 4

=item B<error>

An error number associated with the error.

=item B<lineno>

The line number where the error happened.

=item B<file>

The C source code file name.

=item B<function>

The C function that the error occured in.

=back


=head1 BUILDING

The following assumes a GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2020 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

