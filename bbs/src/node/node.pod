
=pod

=head1 NAME

node - An ANSI C class to manage the node database

=head1 SYNOPSIS

 #include <stdio.h>
 #include <errno.h>

 #include "node.h"
 #include "when.h"
 #include "files.h"
 #include "errors.h"
 #include "tracer.h"
 #include "misc/misc.h"

 node_t *nodes;
 tracer_t *dump;
 errors_t *errs;

 int find_all(void *data, int len, node_base_t *node) {
 
     return TRUE;
     
 }
 
 int dump_trace(char *buffer) {

     fprintf(stderr, "%s\n", buffer);

     return OK;

 }

 int setup(void) {

     int stat = OK;
     int timeout = 1;
     int retries = 30;
     char *path = "../../data/";

     when_error_in {

         errs = errors_create();
         check_creation(errs);

         dump = tracer_create(errs);
         check_creation(dump);

         nodes = node_create(path, 32, retries, timeout, dump);
         check_creation(nodes);

         exit_when;

     } use {

         stat = ERR;
         capture_trace(dump);
         clear_error();

     } end_when;

     return stat;

 }

 void cleanup(void) {

     node_destroy(nodes);
     tracer_destroy(dump);
     errors_destroy(errs);

 }

 int main(int argc, char **argv) {

     int stat = OK;
     queue results;
     node_base_t temp;
     ssize_t count = 0;
     node_search_t *result = NULL;

     when_error_in {

         stat = setup();
         check_status(stat, OK, E_INVOPS);

         stat = node_open(nodes);
         check_return(stat, nodes);

         stat = node_search(nodes, NULL, 0, find_all, &results);
         check_return(stat, nodes);

         while ((result = que_pop_head(&results))) {

             stat = node_get(nodes, result->index, &temp);
             check_return(stat, nodes);

             printf("---------------------------------\n");
             printf("status     : %d\n", temp.status);
             printf("errors     : %d\n", temp.errors);
             printf("action     : %d\n", temp.action);
             printf("user       : %d\n", temp.useron);
             printf("connection : %d\n", temp.connection);
             printf("misc       : %d\n", temp.misc);
             printf("aux        : %d\n", temp.aux);
             printf("extaux     : %ld\n", temp.extaux);

         }

         stat = node_close(nodes);
         check_return(stat, nodes);

         exit_when;

     } use {

         capture_trace(dump);
         tracer_dump(dump, dump_trace);
         clear_error();

     } end_when;

     cleanup();

     return 0;

 }

=head1 DESCRIPTION

This class implements the node database. This is used to keep track
of what individual nodes are doing. This is a fixed size file. The
number of nodes that are supported are defined when the database is
initially created. You need to delete the database for any size
changes to take effect.

This library is a class. It is extensible and overridable. It also makes 
use of the L<errors(3)> and L<tracer(3)> classes for error handling and 
reporting. 

The files node.c and node.h define the class. 

=over 4

=item B<node.h>

This defines the interface to the class. 

=item B<node.c> 

This implements the interface.

=back

=head1 METHODS

=head2 I<node_t *node_create(NULL)>

This method initializes the class. 

=head2 I<int node_destroy(node_t *self)>

This destroys the object. 

=over 4

=item B<self>

A pointer to the node_t object.

=back

=head2 I<int node_override(node_t *self, item_list_t *items)>

This method allows you to override methods. 

=over 4

=item B<self>

A pointer to the node_t object.

=item B<items>

An array of item_list_t data types. The array is 0 terminated.

=back

=head2 I<int node_compare(node_t *this, node_t *that)>

This method allows you to compare one node_t object to another. 

=over 4

=item B<this>

A pointer to a node_t object.

=item B<that>

A pointer to a node_t object.

=back

=head2 I<char *node_version(node_t *self)>

This method returns the version of the library. The version number
follows the guidelines from L<semver.org|https://semver.org/>.

=over 4

=item B<self>

A pointer to the node_t object.

=back

=head2 I<int node_open(node_t *self)>

This method allows access to the nodes. 

=over 4

=item B<self>

A pointer to a node_t object.

=back

=head2 I<int node_close(node_t *self)>

This method closes access to the nodes.

=over 4

=item B<self>

A pointer to a node_t object.

=back

=head2 I<int node_get(node_t *self, int index, node_base_t *node)>

This method gets the indicated node.

=over 4

=item B<self>

A pointer to a node_t object.

=item B<index>

The node to get.

=item B<node>

A pointer to a node_base_t type to write the data too.

=back

=head2 I<int node_put(node_t *self, int index, node_base_t *node)>

This method updates a node.

=over 4

=item B<self>

A pointer to a node_t object.

=item B<index>

The node to update.

=item B<node>

A pointer to a node_base_t type.

=back

=head2 I<int node_put_message(node_t *self, char *buffer, long *msgnum)>

This method sends a message to another node.

=over 4

=item B<self>

A pointer to a node_t object.

=item B<buffer>

A pointer to the message.

=item B<msgnum>

A pointer to write the message number too.

=back

=head2 I<int node_get_message(node_t *self, long msgnum, char **buffer)>

This method retrieves a message from another node.

=over 4

=item B<self>

A pointer to a node_t object.

=item B<msgnum>

The message number to retrieve.

=item B<buffer>

A pointer to write the message too. This buffer will 
need to be freed.

=back

=head2 I<int node_find(node_t *self, void *data, int len, int (*compare)(void *, int, node_base_t *), int *index)>

This method will return the first node that matches the comparison.

=over 4

=item B<self>

A pointer to a node_t object.

=item B<data>

A pointer to the data to use for comparison.

=item B<len>

The length of the data.

=item B<compare>

A comparison function used to match the data to a node_base_t type.
This should return TRUE on match, otherwise FALSE.

=item B<index>

A pointer to write the index of the node that matches. A 0 is returned
if nothing matches.

=back

=head2 I<int node_search(node_t *self, void *data, int len, int (*compare)(void *, int, node_base_t *), queue *results)>

This method will return all the nodes that matches the comparison.

=over 4

=item B<self>

A pointer to a node_t object.

=item B<data>

A pointer to the data to use for the comparison.

=item B<len>

The length of the data.

=item B<compare>

A comparison function used to match the data to a node_base_t type.
This should return TRUE on match, otherwise FALSE.

=item B<results>

A pointer to write the list of node_search_t types. This list may be empty if 
nothing matches.

=back

=head1 RETURNS

The method node_create() returns a pointer to a node_t object. 
All other methods return either OK on success or ERR on failure. The 
extended error description can be returned with object_get_error().

=head1 BUILDING

The following assumes a GNU/GCC build environment.

=over 4

=item make

Builds the module and provides an object archive.

=item make clean

Removes cruft from the directory.

=item make man

Builds the man page.

=item make shared

Builds the module and provides a shared library.

=back

=head1 SEE ALSO

=over 4

=item L<object(3)>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2021 by Kevin L. Esteb

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that this copyright notice appears in all copies. The
author makes no representations about the suitability of this software
for any purpose. It is provided "as is" without express or implied
warranty.

=cut

